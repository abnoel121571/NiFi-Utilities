#!/bin/bash
#
# ==============================================================================
#
#               NiFi Diagnostics Analyzer (v1.0)
#
# ==============================================================================
#
# Description:
#   This script analyzes NiFi diagnostic ZIP files generated by the collection
#   script and provides intelligent recommendations for performance, security,
#   and operational issues. It examines logs, configurations, system metrics,
#   and flow definitions to identify potential problems.
#
# Features:
#   - Performance analysis (memory, CPU, disk I/O)
#   - Security configuration review
#   - Flow design recommendations
#   - Resource utilization assessment
#   - Error pattern detection
#   - Configuration validation
#   - Capacity planning insights
#
# Usage:
#   ./nifi_diagnostics_analyzer.sh <diagnostics_zip_file> [options]
#
# Options:
#   --output-format [text|json|html]  Output format (default: text)
#   --severity [all|critical|warning|info]  Filter by severity (default: all)
#   --category [all|performance|security|config|flow]  Filter by category
#   --verbose                         Include detailed explanations
#   --export <filename>               Export results to file
#   --help                           Show this help message
#
# ==============================================================================

# Script configuration
set -euo pipefail

readonly SCRIPT_VERSION="1.0"
readonly TEMP_DIR="/tmp/nifi_analysis_$$"
readonly DEFAULT_OUTPUT_FORMAT="text"
readonly DEFAULT_SEVERITY="all"
readonly DEFAULT_CATEGORY="all"

# Color codes for output
readonly RED='\033[0;31m'
readonly YELLOW='\033[1;33m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly NC='\033[0m' # No Color

# Initialize variables
OUTPUT_FORMAT="$DEFAULT_OUTPUT_FORMAT"
SEVERITY_FILTER="$DEFAULT_SEVERITY"
CATEGORY_FILTER="$DEFAULT_CATEGORY"
VERBOSE=false
EXPORT_FILE=""
DIAGNOSTICS_FILE=""

# Analysis results arrays
declare -a CRITICAL_ISSUES=()
declare -a WARNING_ISSUES=()
declare -a INFO_ISSUES=()
declare -a RECOMMENDATIONS=()

# --- Functions ---

show_help() {
    cat << EOF
NiFi Diagnostics Analyzer v${SCRIPT_VERSION}

Analyzes NiFi diagnostic ZIP files and provides intelligent recommendations
for performance, security, and operational improvements.

Usage: $0 <diagnostics_zip_file> [options]

Options:
  --output-format [text|json|html]     Output format (default: text)
  --severity [all|critical|warning|info]  Filter by severity (default: all)
  --category [all|performance|security|config|flow]  Filter by category
  --verbose                            Include detailed explanations
  --export <filename>                  Export results to file
  --help                              Show this help message

Examples:
  $0 nifi-diagnostics.zip
  $0 nifi-diagnostics.zip --severity critical --output-format json
  $0 nifi-diagnostics.zip --category performance --verbose
  $0 nifi-diagnostics.zip --export analysis-report.html --output-format html

Categories:
  - performance: Memory, CPU, disk I/O, throughput analysis
  - security: SSL/TLS, authentication, authorization settings
  - config: Configuration validation and best practices
  - flow: Flow design patterns and optimization opportunities

EOF
}

log_message() {
    local level=$1
    local message=$2
    local color=$3
    
    if [[ "$OUTPUT_FORMAT" == "text" ]]; then
        echo -e "${color}[${level}]${NC} ${message}"
    fi
}

log_info() {
    log_message "INFO" "$1" "$BLUE"
}

log_warn() {
    log_message "WARN" "$1" "$YELLOW"
}

log_error() {
    log_message "ERROR" "$1" "$RED"
}

log_success() {
    log_message "SUCCESS" "$1" "$GREEN"
}

cleanup() {
    if [[ -d "$DIAGNOSTICS_FILE" ]]; then
        rm -rf "$DIAGNOSTICS_FILE"
    fi
}

# Set up cleanup on exit
trap cleanup EXIT


analyze_system_info() {
    log_info "Analyzing system information..."
    
    local system_info_file
    system_info_file=$(find "$DIAGNOSTICS_FILE" -name "*system-diagnostics*" -o -name "*system.txt" | head -1)
    
    if [[ -f "$system_info_file" ]]; then
        # Check available memory
        local total_memory
        total_memory=$(grep -i "total.*memory\|physical.*memory" "$system_info_file" | head -1 | grep -oE '[0-9]+' | head -1)
        
        if [[ -n "$total_memory" && "$total_memory" -lt 8000000 ]]; then # Less than 8GB in KB
            CRITICAL_ISSUES+=("Low system memory detected: $(($total_memory/1024/1024))GB. NiFi requires at least 8GB RAM for production use.")
            RECOMMENDATIONS+=("Increase system memory to at least 8GB, preferably 16GB+ for production workloads.")
        fi
        
        # Check CPU cores
        local cpu_cores
        cpu_cores=$(grep -i "processor.*count\|cpu.*core" "$system_info_file" | grep -oE '[0-9]+' | head -1)
        
        if [[ -n "$cpu_cores" && "$cpu_cores" -lt 4 ]]; then
            WARNING_ISSUES+=("Limited CPU cores detected: $cpu_cores. Consider increasing for better performance.")
            RECOMMENDATIONS+=("Allocate at least 4 CPU cores for NiFi, 8+ cores recommended for production.")
        fi
    else
        WARNING_ISSUES+=("System information file not found in diagnostics. Unable to perform system analysis.")
    fi
}

analyze_nifi_properties() {
    log_info "Analyzing NiFi configuration..."
    
    local nifi_props
    nifi_props=$(find "$DIAGNOSTICS_FILE" -name "nifi.properties" | head -1)
    
    if [[ -f "$nifi_props" ]]; then
        # Check JVM memory settings
        local xmx_setting
        xmx_setting=$(grep -E "^nifi\.bootstrap\.jvm\.xmx\s*=" "$nifi_props" | cut -d'=' -f2 | tr -d ' ')
        
        if [[ -n "$xmx_setting" ]]; then
            local xmx_gb
            if [[ "$xmx_setting" =~ ([0-9]+)g ]]; then
                xmx_gb=${BASH_REMATCH[1]}
                if [[ "$xmx_gb" -lt 4 ]]; then
                    CRITICAL_ISSUES+=("JVM heap size too small: ${xmx_setting}. Minimum 4GB recommended.")
                    RECOMMENDATIONS+=("Set nifi.bootstrap.jvm.xmx to at least 4g for production use.")
                elif [[ "$xmx_gb" -gt 32 ]]; then
                    WARNING_ISSUES+=("Very large JVM heap detected: ${xmx_setting}. May cause GC issues.")
                    RECOMMENDATIONS+=("Consider using compressed OOPs and G1GC for heaps >32GB.")
                fi
            fi
        fi
        
        # Check repository locations
        local flowfile_repo
        local content_repo
        local provenance_repo
        
        flowfile_repo=$(grep "^nifi.flowfile.repository.directory" "$nifi_props" | cut -d'=' -f2)
        content_repo=$(grep "^nifi.content.repository.directory" "$nifi_props" | cut -d'=' -f2)
        provenance_repo=$(grep "^nifi.provenance.repository.directory" "$nifi_props" | cut -d'=' -f2)
        
        # Check if repositories are on same filesystem (simplified check)
        if [[ "$flowfile_repo" == "$content_repo" || "$flowfile_repo" == "$provenance_repo" ]]; then
            WARNING_ISSUES+=("Multiple repositories appear to be on the same filesystem. This can cause I/O contention.")
            RECOMMENDATIONS+=("Separate FlowFile, Content, and Provenance repositories across different disks/filesystems.")
        fi
        
        # Check security settings
        if ! grep -q "^nifi.security.keystore" "$nifi_props"; then
            WARNING_ISSUES+=("SSL/TLS not configured. NiFi is running without encryption.")
            RECOMMENDATIONS+=("Enable SSL/TLS by configuring keystore and truststore properties.")
        fi
        
        # Check authentication
        if ! grep -q "^nifi.security.user.login.identity.provider" "$nifi_props"; then
            if ! grep -q "^nifi.security.user.authorizer" "$nifi_props"; then
                WARNING_ISSUES+=("No authentication mechanism configured.")
                RECOMMENDATIONS+=("Configure LDAP, Kerberos, or certificate-based authentication.")
            fi
        fi
        
        # Check clustering
        if grep -q "^nifi.cluster.is.node=true" "$nifi_props"; then
            INFO_ISSUES+=("NiFi is running in cluster mode.")
            
            # Check for embedded ZooKeeper
            if grep -q "^nifi.state.management.embedded.zookeeper.start=true" "$nifi_props"; then
                WARNING_ISSUES+=("Using embedded ZooKeeper in production cluster.")
                RECOMMENDATIONS+=("Use external ZooKeeper ensemble for production clusters.")
            fi
        fi
        
    else
        CRITICAL_ISSUES+=("nifi.properties file not found in diagnostics.")
    fi
}

analyze_bootstrap_conf() {
    log_info "Analyzing bootstrap configuration..."
    
    local bootstrap_conf
    bootstrap_conf=$(find "$DIAGNOSTICS_FILE" -name "bootstrap.conf" | head -1)
    
    if [[ -f "$bootstrap_conf" ]]; then
        # Check JVM arguments
        if ! grep -q "\-XX:+UseG1GC" "$bootstrap_conf"; then
            if grep -q "\-XX:+UseConcMarkSweepGC" "$bootstrap_conf"; then
                WARNING_ISSUES+=("Using deprecated ConcMarkSweepGC. Consider upgrading to G1GC.")
                RECOMMENDATIONS+=("Replace CMS GC with G1GC: -XX:+UseG1GC")
            fi
        fi
        
        # Check for GC logging
        if ! grep -q "\-Xloggc\|\-verbose:gc" "$bootstrap_conf"; then
            INFO_ISSUES+=("GC logging not enabled.")
            RECOMMENDATIONS+=("Enable GC logging for performance monitoring: -Xloggc:logs/nifi-gc.log")
        fi
        
        # Check for heap dumps
        if ! grep -q "\-XX:+HeapDumpOnOutOfMemoryError" "$bootstrap_conf"; then
            RECOMMENDATIONS+=("Enable heap dumps on OOM: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=logs/")
        fi
        
    else
        WARNING_ISSUES+=("bootstrap.conf file not found in diagnostics.")
    fi
}

analyze_logs() {
    log_info "Analyzing log files..."
    
    local app_log
    app_log=$(find "$DIAGNOSTICS_FILE" -name "*nifi-app*log*" | head -1)
    
    if [[ -f "$app_log" ]]; then
        # Check for common error patterns
        local error_count
        error_count=$(grep -c "ERROR" "$app_log" 2>/dev/null || echo "0")
        
        if [[ "$error_count" -gt 100 ]]; then
            CRITICAL_ISSUES+=("High error count in application logs: $error_count errors detected.")
            RECOMMENDATIONS+=("Review application logs for recurring errors and address root causes.")
        fi
        
        # Check for OutOfMemoryError
        if grep -q "OutOfMemoryError\|java.lang.OutOfMemoryError" "$app_log"; then
            CRITICAL_ISSUES+=("OutOfMemoryError detected in logs.")
            RECOMMENDATIONS+=("Increase JVM heap size or investigate memory leaks.")
        fi
        
        # Check for connection issues
        local conn_refused
        conn_refused=$(grep -c "Connection refused\|ConnectException" "$app_log" 2>/dev/null || echo "0")
        
        if [[ "$conn_refused" -gt 10 ]]; then
            WARNING_ISSUES+=("Multiple connection refused errors: $conn_refused occurrences.")
            RECOMMENDATIONS+=("Check network connectivity and downstream system availability.")
        fi
        
        # Check for threading issues
        if grep -q "DeadLock\|deadlock" "$app_log"; then
            CRITICAL_ISSUES+=("Deadlock detected in application logs.")
            RECOMMENDATIONS+=("Investigate thread contention issues and consider thread pool tuning.")
        fi
        
        # Check for slow operations
        local slow_operations
        slow_operations=$(grep -c "took.*[0-9][0-9][0-9][0-9].*ms\|took.*[0-9].*sec" "$app_log" 2>/dev/null || echo "0")
        
        if [[ "$slow_operations" -gt 50 ]]; then
            WARNING_ISSUES+=("Multiple slow operations detected: $slow_operations slow operations.")
            RECOMMENDATIONS+=("Investigate processor performance and consider flow optimization.")
        fi
        
    else
        WARNING_ISSUES+=("Application log file not found in diagnostics.")
    fi
}

analyze_thread_dump() {
    log_info "Analyzing thread dumps..."
    
    local thread_dump
    thread_dump=$(find "$DIAGNOSTICS_FILE" -name "*thread*dump*" -o -name "*threads*" | head -1)
    
    if [[ -f "$thread_dump" ]]; then
        # Check for blocked threads
        local blocked_threads
        blocked_threads=$(grep -c "BLOCKED" "$thread_dump" 2>/dev/null || echo "0")
        
        if [[ "$blocked_threads" -gt 10 ]]; then
            WARNING_ISSUES+=("High number of blocked threads: $blocked_threads blocked threads.")
            RECOMMENDATIONS+=("Investigate thread contention issues and database connection pooling.")
        fi
        
        # Check for waiting threads
        local waiting_threads
        waiting_threads=$(grep -c "WAITING" "$thread_dump" 2>/dev/null || echo "0")
        
        if [[ "$waiting_threads" -gt 100 ]]; then
            INFO_ISSUES+=("High number of waiting threads: $waiting_threads waiting threads.")
        fi
        
    else
        INFO_ISSUES+=("Thread dump not found in diagnostics.")
    fi
}

analyze_flow_configuration() {
    log_info "Analyzing flow configuration..."
    
    local flow_xml
    flow_xml=$(find "$DIAGNOSTICS_FILE" -name "flow.xml*" -o -name "*flow.json*" | head -1)
    
    if [[ -f "$flow_xml" ]]; then
        # Count processors
        local processor_count
        if [[ "$flow_xml" == *.xml ]]; then
            processor_count=$(grep -c "<processor>" "$flow_xml" 2>/dev/null || echo "0")
        else
            processor_count=$(grep -c '"type".*"processor"' "$flow_xml" 2>/dev/null || echo "0")
        fi
        
        if [[ "$processor_count" -gt 1000 ]]; then
            WARNING_ISSUES+=("Very large flow detected: $processor_count processors.")
            RECOMMENDATIONS+=("Consider breaking large flows into smaller, manageable process groups.")
        elif [[ "$processor_count" -gt 500 ]]; then
            INFO_ISSUES+=("Large flow detected: $processor_count processors.")
        fi
        
        # Check for common anti-patterns (simplified)
        if grep -q "GetFile.*PutFile\|ListFile.*FetchFile.*PutFile" "$flow_xml"; then
            INFO_ISSUES+=("Simple file transfer patterns detected.")
            RECOMMENDATIONS+=("Consider using MiNiFi for simple file transfers to reduce resource usage.")
        fi
        
    else
        WARNING_ISSUES+=("Flow configuration file not found in diagnostics.")
    fi
}

generate_summary() {
    local critical_count=${#CRITICAL_ISSUES[@]}
    local warning_count=${#WARNING_ISSUES[@]}
    local info_count=${#INFO_ISSUES[@]}
    local total_count=$((critical_count + warning_count + info_count))
    
    echo ""
    echo "========================================="
    echo "         ANALYSIS SUMMARY"
    echo "========================================="
    echo ""
    echo "Total Issues Found: $total_count"
    echo "  🔴 Critical: $critical_count"
    echo "  🟡 Warning:  $warning_count"
    echo "  🔵 Info:     $info_count"
    echo ""
}

output_results() {
    case "$OUTPUT_FORMAT" in
        "text")
            output_text_format
            ;;
        "json")
            output_json_format
            ;;
        "html")
            output_html_format
            ;;
        *)
            log_error "Unknown output format: $OUTPUT_FORMAT"
            exit 1
            ;;
    esac
}

output_text_format() {
    generate_summary
    
    if should_show_severity "critical" && [[ ${#CRITICAL_ISSUES[@]} -gt 0 ]]; then
        echo -e "${RED}🔴 CRITICAL ISSUES:${NC}"
        echo "==================="
        for issue in "${CRITICAL_ISSUES[@]}"; do
            echo "• $issue"
        done
        echo ""
    fi
    
    if should_show_severity "warning" && [[ ${#WARNING_ISSUES[@]} -gt 0 ]]; then
        echo -e "${YELLOW}🟡 WARNINGS:${NC}"
        echo "============"
        for issue in "${WARNING_ISSUES[@]}"; do
            echo "• $issue"
        done
        echo ""
    fi
    
    if should_show_severity "info" && [[ ${#INFO_ISSUES[@]} -gt 0 ]]; then
        echo -e "${BLUE}🔵 INFORMATION:${NC}"
        echo "==============="
        for issue in "${INFO_ISSUES[@]}"; do
            echo "• $issue"
        done
        echo ""
    fi
    
    if [[ ${#RECOMMENDATIONS[@]} -gt 0 ]]; then
        echo -e "${GREEN}💡 RECOMMENDATIONS:${NC}"
        echo "===================="
        for rec in "${RECOMMENDATIONS[@]}"; do
            echo "• $rec"
        done
        echo ""
    fi
}

output_json_format() {
    cat << EOF
{
    "analysis_version": "$SCRIPT_VERSION",
    "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "summary": {
        "total_issues": $((${#CRITICAL_ISSUES[@]} + ${#WARNING_ISSUES[@]} + ${#INFO_ISSUES[@]})),
        "critical": ${#CRITICAL_ISSUES[@]},
        "warnings": ${#WARNING_ISSUES[@]},
        "info": ${#INFO_ISSUES[@]}
    },
    "issues": {
        "critical": [$(printf '"%s",' "${CRITICAL_ISSUES[@]}" | sed 's/,$//')],
        "warnings": [$(printf '"%s",' "${WARNING_ISSUES[@]}" | sed 's/,$//')],
        "info": [$(printf '"%s",' "${INFO_ISSUES[@]}" | sed 's/,$//')],
        "recommendations": [$(printf '"%s",' "${RECOMMENDATIONS[@]}" | sed 's/,$//')]
    }
}
EOF
}

output_html_format() {
    cat << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NiFi Diagnostics Analysis Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; }
        .summary { background: #e8f4f8; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
        .critical { background-color: #ffeaea; border-left: 4px solid #d32f2f; padding: 15px; margin-bottom: 15px; }
        .warning { background-color: #fff8e1; border-left: 4px solid #f57c00; padding: 15px; margin-bottom: 15px; }
        .info { background-color: #e3f2fd; border-left: 4px solid #1976d2; padding: 15px; margin-bottom: 15px; }
        .recommendations { background-color: #f1f8e9; border-left: 4px solid #388e3c; padding: 15px; margin-bottom: 15px; }
        .issue-list { list-style-type: none; padding-left: 0; }
        .issue-list li { margin-bottom: 10px; }
        h2 { color: #333; border-bottom: 2px solid #ddd; padding-bottom: 10px; }
        .timestamp { color: #666; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔍 NiFi Diagnostics Analysis Report</h1>
            <p class="timestamp">Generated: $(date)</p>
        </div>
        
        <div class="summary">
            <h2>📊 Summary</h2>
            <p><strong>Total Issues:</strong> $((${#CRITICAL_ISSUES[@]} + ${#WARNING_ISSUES[@]} + ${#INFO_ISSUES[@]}))</p>
            <p>🔴 Critical: ${#CRITICAL_ISSUES[@]} | 🟡 Warnings: ${#WARNING_ISSUES[@]} | 🔵 Info: ${#INFO_ISSUES[@]}</p>
        </div>
EOF

    if should_show_severity "critical" && [[ ${#CRITICAL_ISSUES[@]} -gt 0 ]]; then
        echo '        <div class="critical">'
        echo '            <h2>🔴 Critical Issues</h2>'
        echo '            <ul class="issue-list">'
        for issue in "${CRITICAL_ISSUES[@]}"; do
            echo "                <li>• $issue</li>"
        done
        echo '            </ul>'
        echo '        </div>'
    fi

    if should_show_severity "warning" && [[ ${#WARNING_ISSUES[@]} -gt 0 ]]; then
        echo '        <div class="warning">'
        echo '            <h2>🟡 Warnings</h2>'
        echo '            <ul class="issue-list">'
        for issue in "${WARNING_ISSUES[@]}"; do
            echo "                <li>• $issue</li>"
        done
        echo '            </ul>'
        echo '        </div>'
    fi

    if should_show_severity "info" && [[ ${#INFO_ISSUES[@]} -gt 0 ]]; then
        echo '        <div class="info">'
        echo '            <h2>🔵 Information</h2>'
        echo '            <ul class="issue-list">'
        for issue in "${INFO_ISSUES[@]}"; do
            echo "                <li>• $issue</li>"
        done
        echo '            </ul>'
        echo '        </div>'
    fi

    if [[ ${#RECOMMENDATIONS[@]} -gt 0 ]]; then
        echo '        <div class="recommendations">'
        echo '            <h2>💡 Recommendations</h2>'
        echo '            <ul class="issue-list">'
        for rec in "${RECOMMENDATIONS[@]}"; do
            echo "                <li>• $rec</li>"
        done
        echo '            </ul>'
        echo '        </div>'
    fi

    cat << EOF
    </div>
</body>
</html>
EOF
}

should_show_severity() {
    local severity=$1
    [[ "$SEVERITY_FILTER" == "all" || "$SEVERITY_FILTER" == "$severity" ]]
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --output-format)
            OUTPUT_FORMAT="$2"
            shift 2
            ;;
        --severity)
            SEVERITY_FILTER="$2"
            shift 2
            ;;
        --category)
            CATEGORY_FILTER="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --export)
            EXPORT_FILE="$2"
            shift 2
            ;;
        --help)
            show_help
            exit 0
            ;;
        -*)
            log_error "Unknown option: $1"
            exit 1
            ;;
        *)
            if [[ -z "$DIAGNOSTICS_FILE" ]]; then
                DIAGNOSTICS_FILE="$1"
            else
                log_error "Multiple diagnostic files specified. Please provide only one."
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate inputs
if [[ -z "$DIAGNOSTICS_FILE" ]]; then
    log_error "No diagnostic ZIP file specified."
    echo "Use --help for usage information."
    exit 1
fi

if [[ ! -f "$DIAGNOSTICS_FILE" ]]; then
    log_error "Diagnostic file not found: $DIAGNOSTICS_FILE"
    exit 1
fi

# Main execution
log_info "Starting NiFi diagnostics analysis..."
log_info "Analyzing file: $DIAGNOSTICS_FILE"

DIAGNOSTICS_FILE="$DIAGNOSTICS_FILE"

# Run analysis functions
analyze_system_info
analyze_nifi_properties
analyze_bootstrap_conf
analyze_logs
analyze_thread_dump
analyze_flow_configuration

# Output results
if [[ -n "$EXPORT_FILE" ]]; then
    output_results > "$EXPORT_FILE"
    log_success "Analysis results exported to: $EXPORT_FILE"
else
    output_results
fi

log_success "Analysis complete!"

